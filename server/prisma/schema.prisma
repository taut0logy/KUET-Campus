generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  STUDENT
  FACULTY
  OFFICE_MANAGER
  CAFE_MANAGER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ClubRole {
  MEMBER
  MODERATOR
  MANAGER
}

enum ClubStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum FacultyDesignation {
  PROFESSOR
  ASSOCIATE_PROFESSOR
  ASSISTANT_PROFESSOR
  LECTURER
  SENIOR_LECTURER
  TEACHERS_ASSISTANT
}

enum FacultyStatus {
  GUEST
  PERMANENT
  PART_TIME
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique @db.VarChar(255)
  password          String
  name              String         @db.VarChar(255)
  cart              Cart?
  roles             UserRole[]     @default([STUDENT])
  employeeInfo      EmployeeInfo?  @relation("UserEmployeeInfo")
  studentInfo       StudentInfo?   @relation("UserStudentInfo")
  facultyInfo       FacultyInfo?   @relation("UserFacultyInfo")
  works             Work[]         @relation("UserWorks")
  status            UserStatus     @default(ACTIVE)
  emailVerified     Boolean        @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  sessions          Session[]
  messages          Message[]      @relation("MessageSender")
  receivedMessages  Message[]      @relation("MessageReceiver")
  notifications     Notification[]
  preorders         Preorder[]
  routines          Routine[]
  courses           Course[]
  clubs             UserClub[]      @relation("UserClubs")
  managedClubs      UserClubManager[]      @relation("ClubManagers")
  moderatedClubs    Club[]          @relation("ClubModerator")
  eventFollowers    Event[]         @relation("EventFollowers")
  clubFollowers     Club[]          @relation("ClubFollowers")
  clubTags          ClubTag[]       @relation("ClubTagFollowers")
  eventTags         EventTag[]      @relation("EventTagFollowers")
  userVisits        UserVisit[]
  followUnfollowLogs FollowUnfollowLog[]
  eventVisits       EventVisit[]
  eventFollowUnfollowLogs EventFollowUnfollowLog[]

  @@map("users")
}

model Club {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  coverPhoto   String?    @db.VarChar(255)
  slug         String     @unique @db.VarChar(255)
  description  String?    @db.Text
  foundingDate DateTime
  moderatorId  Int
  moderator    User       @relation("ClubModerator", fields: [moderatorId], references: [id])
  managers     UserClubManager[]
  tags         Json
  members      UserClub[] @relation
  events       Event[]    @relation
  clubTag      ClubTag?   @relation(fields: [clubTagId], references: [id])
  clubTagId    Int?
  followers    User[]     @relation("ClubFollowers")
  clubAlbums   ClubAlbum[]
  userVisits   UserVisit[]
  followUnfollowLogs FollowUnfollowLog[]
}

model UserClub {
  id       Int        @id @default(autoincrement())
  userId   Int
  clubId   Int
  joinDate DateTime   @default(now())
  role     ClubRole   @default(MEMBER)
  status   ClubStatus @default(ACTIVE)
  user     User       @relation("UserClubs", fields: [userId], references: [id], map: "UserClub_userId_fkey1")
  club     Club       @relation(fields: [clubId], references: [id], map: "UserClub_clubId_fkey1")
}

model UserClubManager {
  id       Int        @id @default(autoincrement())
  userId   Int
  clubId   Int
  joinDate DateTime   @default(now())
  role     ClubRole   @default(MANAGER)
  user     User       @relation("ClubManagers", fields: [userId], references: [id], map: "UserClubManager_userId_fkey")
  club     Club       @relation(fields: [clubId], references: [id], map: "UserClubManager_clubId_fkey")
}

model Work {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  startTime   DateTime
  endTime     DateTime
  description String?     @db.Text
  facultyId   Int
  faculty     FacultyInfo @relation("FacultyWorks", fields: [facultyId], references: [id])
  user        User        @relation("UserWorks", fields: [userId], references: [id])
  userId      Int
}

model Department {
  id        Int           @id @default(autoincrement())
  name      String        @unique @db.VarChar(255)
  alias     String        @unique @db.VarChar(10)
  faculty   String        @db.VarChar(255)
  students  StudentInfo[]
  faculties FacultyInfo[]
}

model FacultyInfo {
  id           Int                @id @default(autoincrement())
  employeeId   String             @unique @db.VarChar(50)
  status       FacultyStatus
  designation  FacultyDesignation
  departmentId Int
  department   Department         @relation(fields: [departmentId], references: [id])
  bio          String?            @db.Text
  user         User               @relation("UserFacultyInfo", fields: [userId], references: [id])
  userId       Int                @unique
  works        Work[]             @relation("FacultyWorks")
}

model EmployeeInfo {
  id          Int    @id @default(autoincrement())
  employeeId  String @unique @db.VarChar(50)
  designation String @db.VarChar(100)
  user        User?  @relation("UserEmployeeInfo", fields: [userId], references: [id])
  userId      Int?   @unique
}

model StudentInfo {
  id           Int        @id @default(autoincrement())
  studentId    String     @unique @db.VarChar(50)
  section      String     @db.VarChar(10)
  batch        Int
  user         User       @relation("UserStudentInfo", fields: [userId], references: [id])
  userId       Int        @unique
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   Int
  receiverId Int?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User?    @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: SetNull)

  @@map("messages")
}

model Notification {
  id        String   @id @default(uuid())
  userId    Int
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String   @default("INFO")
  metadata  Json?    @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Meal {
  id          Int        @id @default(autoincrement()) @map("meal_id")
  name        String
  description String?    @db.Text
  price       Decimal
  category    String
  isVegan     Boolean    @default(false)
  isGlutenFree Boolean   @default(false)
  isSugarFree Boolean    @default(false)
  isLowFat    Boolean    @default(false)
  isOrganic   Boolean    @default(false)
  calories    Int?
  protein     Int?
  carbs       Int?
  fat         Int?
  fiber       Int?
  sugar       Int?
  sodium      Int?
  vitaminA    Int?
  vitaminC    Int?
  calcium     Int?
  iron        Int?
  allergens   Json?
  cartItems   CartItem[]
  preorders   Preorder[]

  @@map("meals")
}

model Preorder {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id])
  mealId           Int
  meal             Meal     @relation(fields: [mealId], references: [id])
  quantity         Int      @default(1)
  status           String   @default("pending_approval")
  orderTime        DateTime @default(now())
  pickupTime       DateTime?
  verificationCode String   @unique
  rejectionReason  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("preorders")
}

model Cart {
  id        Int        @id @default(autoincrement()) @map("cart_id")
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id         Int      @id @default(autoincrement()) @map("cart_item_id")
  cartId     Int
  cart       Cart     @relation(fields: [cartId], references: [id])
  mealId     Int
  meal       Meal     @relation(fields: [mealId], references: [id])
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([cartId, mealId])
  @@map("cart_items")
}

model Routine {
  id      String  @id @default(uuid())
  userId  Int
  weekday String
  period1 String?
  period2 String?
  period3 String?
  period4 String?
  period5 String?
  period6 String?
  period7 String?
  period8 String?
  period9 String?
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([weekday, userId])
  @@map("routines")
}

model Course {
  id         String @id @default(uuid())
  courseId   String @unique
  courseName String
  classTest  String
  userId     Int
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("courses")
}

// Bus related models
enum ScheduleStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELAYED
  PENDING
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  INSPECTION
}

enum BusType {
  SHUTTLE
  MINIBUS
  ARTICULATED
}

enum FrequencyType {
  DAILY
  WEEKDAYS
  WEEKLY
}

enum Direction {
  CLOCKWISE
  COUNTER_CLOCKWISE
}

model Bus {
  id           String           @id @default(uuid())
  busNumber    String           @unique
  licensePlate String? // Made nullable first
  capacity     Int
  type         BusType? // Using enum instead of String
  isActive     Boolean          @default(true)
  description  String?
  routes       BusRoute[] // Add reverse relation
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  schedules    BusSchedule[]
  drivers      Driver[]
  maintenance  MaintenanceLog[]

  @@map("buses")
}

model Driver {
  id            String        @id @default(uuid())
  firstName     String
  lastName      String
  licenseNumber String        @unique
  phone         String?
  isAvailable   Boolean       @default(true)
  availability  String? // Consider creating an enum for this
  schedules     BusSchedule[]
  buses         Bus[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([isAvailable]) // Add index for frequent queries
  @@map("drivers")
}

model BusRoute {
  id         String        @id @default(uuid())
  routeName  String
  routeCode  String? // Made nullable first
  startPoint String
  endPoint   String
  distance   Float // in kilometers
  duration   Int // in minutes
  direction  Direction? // Using enum instead of String
  isActive   Boolean       @default(true)
  busId      String
  bus        Bus           @relation(fields: [busId], references: [id], onDelete: Cascade)
  schedules  BusSchedule[]
  stops      BusStop[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([isActive]) // Add index for frequent queries
  @@map("bus_routes")
}

model BusStop {
  id            String   @id @default(uuid())
  stopName      String
  sequence      Int
  timeFromStart Int? // First make it nullable
  routeId       String
  route         BusRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)
  campusZone    String?
  latitude      Float?
  longitude     Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([routeId, sequence])
  @@unique([stopName, routeId])
  @@index([routeId])
  @@map("bus_stops")
}

model BusSchedule {
  id                String         @id @default(uuid())
  busId             String
  routeId           String
  driverId          String?
  departureTime     String // Consider using DateTime with @db.Time
  arrivalTime       String // Consider using DateTime with @db.Time
  bookedSeats       Int            @default(0)
  totalCapacity     Int            @default(50) // Added default
  availableSeats    Int            @default(50) // Added default
  isRecurring       Boolean        @default(false)
  recurrencePattern String?
  frequency         FrequencyType  @default(DAILY) // Added default
  validFrom         DateTime       @default(now()) // Added default
  validUntil        DateTime?
  status            ScheduleStatus @default(SCHEDULED)
  bus               Bus            @relation(fields: [busId], references: [id], onDelete: Cascade)
  route             BusRoute       @relation(fields: [routeId], references: [id], onDelete: Cascade)
  driver            Driver?        @relation(fields: [driverId], references: [id], onDelete: SetNull)
  reminders         Reminder[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([status]) // Add index for frequent queries
  @@index([validFrom]) // Add index for date queries
  @@map("bus_schedules")
}

model MaintenanceLog {
  id              String          @id @default(uuid())
  busId           String
  maintenanceDate DateTime
  type            MaintenanceType // Using enum instead of String
  description     String
  cost            Decimal?        @db.Decimal(10, 2)
  nextDueDate     DateTime?
  bus             Bus             @relation(fields: [busId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([maintenanceDate]) // Add index for date queries
  @@map("maintenance_logs")
}

model Reminder {
  id           String      @id @default(uuid())
  studentId    String // Consider adding proper relation to User/Student model
  scheduleId   String
  reminderTime DateTime
  busSchedule  BusSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([reminderTime]) // Add index for date queries
  @@index([studentId]) // Add index for frequent queries
  @@map("reminders")
}


model ClubTag {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text
  clubs       Club[]  @relation
  followers   User[]  @relation("ClubTagFollowers")
}

model EventTag {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text
  events      Event[] @relation
  followers   User[]  @relation("EventTagFollowers")
}

model ClubAlbum {
  id          Int       @id @default(autoincrement())
  clubId      Int
  club        Club      @relation(fields: [clubId], references: [id])
  photos      Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  clubAlbumPhotos ClubAlbumPhoto[]
}

model ClubAlbumPhoto {
  id          Int       @id @default(autoincrement())
  clubAlbumId Int
  clubAlbum   ClubAlbum @relation(fields: [clubAlbumId], references: [id])
  photoUrl    String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Event {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  coverPhoto  String?   @db.VarChar(255)
  slug        String    @unique @db.VarChar(255)
  description String?   @db.Text
  startTime   DateTime
  endTime     DateTime
  eventLinks  Json
  tags        EventTag[]
  clubId      Int
  club        Club      @relation(fields: [clubId], references: [id])
  followers   User[]    @relation("EventFollowers")
  eventVisits EventVisit[]
  eventFollowUnfollowLogs EventFollowUnfollowLog[]
}

model UserVisit {
  id        Int      @id @default(autoincrement())
  userId    Int
  clubId    Int
  visitedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  club      Club     @relation(fields: [clubId], references: [id])
}

model FollowUnfollowLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  clubId      Int
  action      String
  actionAt    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  club        Club     @relation(fields: [clubId], references: [id])
}

model EventVisit {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  visitedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
}

model EventFollowUnfollowLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  eventId     Int
  action      String
  actionAt    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  event       Event    @relation(fields: [eventId], references: [id])
}