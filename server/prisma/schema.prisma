generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  STUDENT
  FACULTY
  OFFICE_MANAGER
  CAFE_MANAGER
  CLUB_MODERATOR
  CLUB_MANAGER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum FacultyDesignation {
  PROFESSOR
  ASSOCIATE_PROFESSOR
  ASSISTANT_PROFESSOR
  LECTURER
  SENIOR_LECTURER
  TEACHERS_ASSISTANT
}

enum FacultyStatus {
  GUEST
  PERMANENT
  PART_TIME
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique @db.VarChar(255)
  password          String
  name              String         @db.VarChar(255)
  roles             UserRole[]     @default([STUDENT])
  employeeInfo      EmployeeInfo?  @relation("UserEmployeeInfo")
  studentInfo       StudentInfo?   @relation("UserStudentInfo")
  facultyInfo       FacultyInfo?   @relation("UserFacultyInfo")
  works             Work[]         @relation("UserWorks")
  status            UserStatus     @default(ACTIVE)
  emailVerified     Boolean        @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  sessions          Session[]
  messages          Message[]      @relation("MessageSender")
  receivedMessages  Message[]      @relation("MessageReceiver")
  notifications     Notification[]
  preorders         Preorder[]
  Routine           Routine[]
  Course            Course[]
  Assignment        Assignment[]
  Exam              Exam[]

  @@map("users")
}

model Work {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  startTime   DateTime
  endTime     DateTime
  description String?     @db.Text // Markdown support
  facultyId   Int
  faculty     FacultyInfo @relation("FacultyWorks", fields: [facultyId], references: [id])
  user        User        @relation("UserWorks", fields: [userId], references: [id])
  userId      Int
}

model Department {
  id        Int           @id @default(autoincrement())
  name      String        @unique @db.VarChar(255)
  alias     String        @unique @db.VarChar(10)
  faculty   String        @db.VarChar(255)
  students  StudentInfo[]
  faculties FacultyInfo[]
}

model FacultyInfo {
  id           Int                @id @default(autoincrement())
  employeeId   String             @unique @db.VarChar(50)
  status       FacultyStatus
  designation  FacultyDesignation
  departmentId Int
  department   Department         @relation(fields: [departmentId], references: [id])
  bio          String?            @db.Text // Markdown support
  user         User               @relation("UserFacultyInfo", fields: [userId], references: [id])
  userId       Int                @unique
  works        Work[]             @relation("FacultyWorks")
}

model EmployeeInfo {
  id          Int    @id @default(autoincrement())
  employeeId  String @unique @db.VarChar(50)
  designation String @db.VarChar(100)
  user        User?  @relation("UserEmployeeInfo", fields: [userId], references: [id])
  userId      Int?   @unique
}

model StudentInfo {
  id           Int        @id @default(autoincrement())
  studentId    String     @unique @db.VarChar(50)
  section      String     @db.VarChar(10)
  batch        Int
  user         User       @relation("UserStudentInfo", fields: [userId], references: [id])
  userId       Int        @unique
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   Int
  receiverId Int?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User?    @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: SetNull)

  @@map("messages")
}

model Notification {
  id        String   @id @default(uuid())
  userId    Int
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String   @default("INFO")
  metadata  Json?    @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Meal {
  id           Int        @id @default(autoincrement()) @map("meal_id")
  name         String
  description  String?    @db.Text
  nutrition    Json?
  price        Decimal
  category     String
  isVegan      Boolean    @default(false)
  isGlutenFree Boolean    @default(false)
  allergens    Json?
  menuMeals    MenuMeal[]

  @@map("meals")
}

model Menu {
  id        Int        @id @default(autoincrement()) @map("menu_id")
  date      DateTime   @db.Date
  menuMeals MenuMeal[]

  @@map("menus")
}

model MenuMeal {
  id        Int        @id @default(autoincrement()) @map("menu_meal_id")
  menuId    Int        @map("menu_id")
  mealId    Int        @map("meal_id")
  price     Decimal    @db.Decimal(10, 2)
  available Boolean    @default(true)
  menu      Menu       @relation(fields: [menuId], references: [id])
  meal      Meal       @relation(fields: [mealId], references: [id])
  preorders Preorder[]

  @@map("menu_meals")
}

model Preorder {
  id         Int      @id @default(autoincrement()) @map("order_id")
  userId     Int      @map("user_id")
  menuMealId Int      @map("menu_meal_id")
  orderTime  DateTime @default(now()) @map("order_time")
  status     String   @default("placed") // "placed", "ready", "picked_up"
  user       User     @relation(fields: [userId], references: [id])
  menuMeal   MenuMeal @relation(fields: [menuMealId], references: [id])

  @@map("preorders")
}

model Routine {
  id      String  @id @default(uuid())
  userId  Int // Foreign key to User
  weekday String // Weekday (e.g., "Sunday", "Monday", etc.)
  period1 String? // Course for period 1
  period2 String? // Course for period 2
  period3 String? // Course for period 3
  period4 String? // Course for period 4
  period5 String? // Course for period 5
  period6 String? // Course for period 6
  period7 String? // Course for period 7
  period8 String? // Course for period 8
  period9 String? // Course for period 9
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([weekday, userId]) // Unique constraint on weekday and userId
  @@map("routines")
}

model Course {
  id         String       @id @default(uuid())
  courseId   String       @unique
  courseName String
  courseType String
  userId     Int // Foreign key to User
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Assignment Assignment[]
  Exam       Exam[] // Add relation to Exam model

  @@map("courses")
}

model Assignment {
  id                        String   @id @default(uuid()) @map("assignment_id")
  userId                    Int      @map("user_id")
  courseId                  String   @map("course_id")
  assignmentName            String   @map("assignment_name")
  assignmentContent         String?  @map("assignment_content") @db.Text
  deadline                  DateTime
  status                    String   @default("due") // Add status field with default value
  notifiedFor24HourDeadline Boolean  @default(false)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course                    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("assignments")
}

// New model for exams
model Exam {
  id        String   @id @default(uuid())
  userId    Int // Foreign key to User
  courseId  String // Foreign key to Course
  examType  String // "term-final", "class-test", "lab-test"
  syllabus  String?  @db.Text
  examDate  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("exams")
}
