// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  STUDENT
  FACULTY
  OFFICE_MANAGER
  CAFE_MANAGER
  CLUB_MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String?
  firstName         String?
  lastName          String?
  roles             UserRole[]     @default([STUDENT])
  status            UserStatus     @default(PENDING_VERIFICATION)
  emailVerified     Boolean        @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  profile           Profile?
  sessions          Session[]
  messages          Message[]      @relation("MessageSender")
  receivedMessages  Message[]      @relation("MessageReceiver")
  notifications     Notification[]
  preorders         Preorder[]
  Routine           Routine[]
  Course            Course[]

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  firstName String?
  lastName  String?
  bio       String?
  avatar    String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  receiverId String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User?    @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: SetNull)

  @@map("messages")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String   @default("INFO")
  metadata  Json?    @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Meal {
  id           Int        @id @default(autoincrement()) @map("meal_id")
  name         String
  description  String?    @db.Text
  nutrition    Json?
  price        Decimal
  category     String
  isVegan      Boolean    @default(false)
  isGlutenFree Boolean    @default(false)
  allergens    Json?
  menuMeals    MenuMeal[]

  @@map("meals")
}

model Menu {
  id        Int        @id @default(autoincrement()) @map("menu_id")
  date      DateTime   @db.Date
  menuMeals MenuMeal[]

  @@map("menus")
}

model MenuMeal {
  id        Int        @id @default(autoincrement()) @map("menu_meal_id")
  menuId    Int        @map("menu_id")
  mealId    Int        @map("meal_id")
  price     Decimal    @db.Decimal(10, 2)
  available Boolean    @default(true)
  menu      Menu       @relation(fields: [menuId], references: [id])
  meal      Meal       @relation(fields: [mealId], references: [id])
  preorders Preorder[]

  @@map("menu_meals")
}

model Preorder {
  id         Int      @id @default(autoincrement()) @map("order_id")
  userId     String   @map("user_id")
  menuMealId Int      @map("menu_meal_id")
  orderTime  DateTime @default(now()) @map("order_time")
  status     String   @default("placed") // "placed", "ready", "picked_up"
  user       User     @relation(fields: [userId], references: [id])
  menuMeal   MenuMeal @relation(fields: [menuMealId], references: [id])

  @@map("preorders")
}

model Routine {
  id      String  @id @default(uuid())
  userId  String // Foreign key to User
  weekday String // Weekday (e.g., "Sunday", "Monday", etc.)
  period1 String? // Course for period 1
  period2 String? // Course for period 2
  period3 String? // Course for period 3
  period4 String? // Course for period 4
  period5 String? // Course for period 5
  period6 String? // Course for period 6
  period7 String? // Course for period 7
  period8 String? // Course for period 8
  period9 String? // Course for period 9
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([weekday, userId]) // Unique constraint on weekday and userId
  @@map("routines")
}

model Course {
  id         String @id @default(uuid())
  courseId   String @unique
  courseName String
  classTest  String // "class" or "test"
  userId     String // Foreign key to User
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("courses")
}

// Bus related models
enum ScheduleStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELAYED
  PENDING
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  INSPECTION
}

enum BusType {
  SHUTTLE
  MINIBUS
  ARTICULATED
}

enum FrequencyType {
  DAILY
  WEEKDAYS
  WEEKLY
}

enum Direction {
  CLOCKWISE
  COUNTER_CLOCKWISE
}

model Bus {
  id           String           @id @default(uuid())
  busNumber    String           @unique
  licensePlate String? // Made nullable first
  capacity     Int
  type         BusType? // Using enum instead of String
  isActive     Boolean          @default(true)
  description  String?
  routes       BusRoute[] // Add reverse relation
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  schedules    BusSchedule[]
  drivers      Driver[]
  maintenance  MaintenanceLog[]

  @@map("buses")
}

model Driver {
  id            String        @id @default(uuid())
  firstName     String
  lastName      String
  licenseNumber String        @unique
  phone         String?
  isAvailable   Boolean       @default(true)
  availability  String? // Consider creating an enum for this
  schedules     BusSchedule[]
  buses         Bus[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([isAvailable]) // Add index for frequent queries
  @@map("drivers")
}

model BusRoute {
  id         String        @id @default(uuid())
  routeName  String
  routeCode  String? // Made nullable first
  startPoint String
  endPoint   String
  distance   Float // in kilometers
  duration   Int // in minutes
  direction  Direction? // Using enum instead of String
  isActive   Boolean       @default(true)
  busId      String
  bus        Bus           @relation(fields: [busId], references: [id], onDelete: Cascade)
  schedules  BusSchedule[]
  stops      BusStop[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([isActive]) // Add index for frequent queries
  @@map("bus_routes")
}

model BusStop {
  id            String   @id @default(uuid())
  stopName      String
  sequence      Int
  timeFromStart Int? // First make it nullable
  routeId       String
  route         BusRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)
  campusZone    String?
  latitude      Float?
  longitude     Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([routeId, sequence])
  @@unique([stopName, routeId])
  @@index([routeId])
  @@map("bus_stops")
}

model BusSchedule {
  id                String         @id @default(uuid())
  busId             String
  routeId           String
  driverId          String?
  departureTime     String // Consider using DateTime with @db.Time
  arrivalTime       String // Consider using DateTime with @db.Time
  bookedSeats       Int            @default(0)
  totalCapacity     Int            @default(50) // Added default
  availableSeats    Int            @default(50) // Added default
  isRecurring       Boolean        @default(false)
  recurrencePattern String?
  frequency         FrequencyType  @default(DAILY) // Added default
  validFrom         DateTime       @default(now()) // Added default
  validUntil        DateTime?
  status            ScheduleStatus @default(SCHEDULED)
  bus               Bus            @relation(fields: [busId], references: [id], onDelete: Cascade)
  route             BusRoute       @relation(fields: [routeId], references: [id], onDelete: Cascade)
  driver            Driver?        @relation(fields: [driverId], references: [id], onDelete: SetNull)
  reminders         Reminder[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([status]) // Add index for frequent queries
  @@index([validFrom]) // Add index for date queries
  @@map("bus_schedules")
}

model MaintenanceLog {
  id              String          @id @default(uuid())
  busId           String
  maintenanceDate DateTime
  type            MaintenanceType // Using enum instead of String
  description     String
  cost            Decimal?        @db.Decimal(10, 2)
  nextDueDate     DateTime?
  bus             Bus             @relation(fields: [busId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([maintenanceDate]) // Add index for date queries
  @@map("maintenance_logs")
}

model Reminder {
  id           String      @id @default(uuid())
  studentId    String // Consider adding proper relation to User/Student model
  scheduleId   String
  reminderTime DateTime
  busSchedule  BusSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([reminderTime]) // Add index for date queries
  @@index([studentId]) // Add index for frequent queries
  @@map("reminders")
}
