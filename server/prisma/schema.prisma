// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  STUDENT
  FACULTY
  OFFICE_MANAGER
  CAFE_MANAGER
  CLUB_MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id                String       @id @default(uuid())
  email             String       @unique
  password          String?
  firstName         String?
  lastName          String?
  cart              Cart?
  roles             UserRole[]   @default([STUDENT])
  status            UserStatus   @default(PENDING_VERIFICATION)
  emailVerified     Boolean      @default(false)
  verificationToken String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  profile           Profile?
  sessions          Session[]
  messages          Message[]    @relation("MessageSender")
  receivedMessages  Message[]    @relation("MessageReceiver")
  notifications     Notification[]
  preorders         Preorder[]
  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  firstName String?
  lastName  String?
  bio       String?
  avatar    String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Message {
  id          String   @id @default(uuid())
  content     String
  senderId    String
  receiverId  String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User?    @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: SetNull)

  @@map("messages")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String   @default("INFO")
  metadata  Json?    @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}


model Meal {
  id          Int        @id @default(autoincrement()) @map("meal_id")
  name        String
  description String?    @db.Text
  nutrition   Json?
  price       Decimal
  category    String
  isVegan        Boolean    @default(false)
  isGlutenFree   Boolean    @default(false)
  allergens      Json?
  cartItems   CartItem[]
  preorders   Preorder[]
  @@map("meals")
}



model Preorder {
  id               Int      @id @default(autoincrement())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  mealId           Int
  meal             Meal     @relation(fields: [mealId], references: [id])
  quantity         Int      @default(1)
  status           String   @default("pending_approval") 
  orderTime        DateTime @default(now())
  pickupTime       DateTime
  verificationCode String   @unique
  rejectionReason  String?  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("preorders")
}


model Cart {
  id        Int        @id @default(autoincrement()) @map("cart_id")
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id         Int      @id @default(autoincrement()) @map("cart_item_id")
  cartId     Int
  cart       Cart     @relation(fields: [cartId], references: [id])
  mealId     Int
  meal       Meal     @relation(fields: [mealId], references: [id])
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([cartId, mealId])
  @@map("cart_items")
}

